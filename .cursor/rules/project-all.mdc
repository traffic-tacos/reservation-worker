---
description: Traffic Tacos 전체 아키텍처 및 시스템 설계 개요
globs:
alwaysApply: true
---

# Traffic Tacos: 대규모 티켓 예매 플랫폼 아키텍처

## 🎯 프로젝트 목표
3만 RPS 트래픽에도 안정성, 보안, 비용 최적화를 고려한 EKS 기반 Cloud-Native 티켓 예매 시스템

## 🏗️ 시스템 아키텍처

### 서비스 구성 (6개 컴포넌트)
1. **api-gateway (BFF)** - Go + Fiber
   - 외부 엔드포인트, JWT 검증, 요청 집계
   - 30k RPS 트래픽의 첫 진입점

2. **reservation-api** - Spring Boot (Java 17)
   - 예약 토큰 발급, 60s 홀드 처리
   - DynamoDB 기반 상태 관리

3. **inventory-api** - Go + Echo
   - 재고/좌석 소유권 관리
   - DynamoDB 조건부 업데이트로 오버셀 0% 보장

4. **payment-sim-api** - Node.js (Express/Fastify)
   - 결제 모의 승인/실패/지연 처리
   - 웹훅 엔드포인트 제공

5. **worker** - Go
   - 비동기 워크플로 처리 (예약 만료, 결제 승인/취소)
   - SQS FIFO + EventBridge 이벤트 기반

6. **web** - React + Vite (SSG)
   - 사용자 대기열/예약 화면
   - CloudFront + S3 기반 정적 호스팅

## 🔄 통신 패턴

### 동기 통신
- **외부 → api-gateway**: REST/JSON (HTTPS only)
- **api-gateway → reservation-api**: REST/JSON
- **reservation-api → inventory-api**: gRPC

### 비동기 통신
- **reservation-api → worker**: 이벤트 (SQS FIFO, EventBridge)
- **payment-sim-api → worker**: 이벤트/웹훅

## 🔒 보안 & 거버넌스

### 엣지 보안
- Gateway API + AWS WAF/Shield
- DDoS 방어, Rate Limiting, Bot 차단

### 내부 보안
- cert-manager 기반 TLS 자동화
- Kyverno/OPA 정책 기반 보안
- IRSA (IAM Roles for Service Accounts)
- Falco 런타임 보안 모니터링

### 네트워크 격리
- Namespace 기반 격리
- NetworkPolicy 적용
- mTLS 내부 통신

## 📊 관측 & 운영

### 메트릭 수집
- OpenTelemetry: Trace/Metric/Log 통합
- Prometheus: RED 메트릭 모니터링
- Jaeger/Tempo: 분산 추적
- Loki/Fluentd: 로그 수집

### 모니터링 대시보드
- Grafana 기반 통합 대시보드
- 실시간 성능 모니터링
- 장애 감지 및 알림

## 💰 비용 최적화 (FinOps)

### 컴퓨팅 최적화
- EKS HPA + Karpenter
- 온디맥드 + 스팟 인스턴스 혼합
- Graviton (ARM64) 활용

### 데이터베이스 최적화
- DynamoDB 온디맥드 → 프로비저닝 모드 전환
- AutoScaling 기반 용량 관리
- 비용 분석을 위한 Kubecost/OpenCost

### 이벤트 기반 아키텍처
- Lambda/EventBridge로 비용 최소화
- 특정 기능(만료 타이머)에 제한적 활용

## 🎯 핵심 요구사항

### 성능 목표
- **목표 RPS**: 30,000 RPS 트래픽 안정 처리
- **P95 Latency**: < 500ms 유지
- **오버셀 방지**: 재고 관리 시 0% 허용

### 안정성 목표
- **가용성**: 99.9% SLA 목표
- **내결함성**: Multi-AZ 배포
- **재해 복구**: Cross-region 백업

### 보안 목표
- **최소 권한 원칙**: IRSA 기반 IAM 역할
- **암호화**: 전송 중/저장 중 데이터 암호화
- **컴플라이언스**: GDPR, PCI DSS 준수

## 📈 확장 전략

### 수평 확장
- API Gateway: HPA 기반 자동 확장
- Worker: 이벤트 기반 자동 확장
- Database: DynamoDB AutoScaling

### 수직 확장
- 컴퓨팅 리소스: CPU/Memory 기반 조정
- 데이터베이스: 읽기/쓰기 용량 조정

### 글로벌 확장
- Multi-region 배포 고려
- CDN 기반 정적 자원 분산
- 데이터 복제 전략 수립

---

## 🎨 설계 원칙

1. **Cloud-Native First**: 컨테이너화, 마이크로서비스, GitOps
2. **보안 우선**: Zero Trust 아키텍처, 최소 권한 원칙
3. **관측 가능성**: 모든 컴포넌트에 메트릭/로그/트레이스
4. **비용 효율성**: FinOps 기반 리소스 최적화
5. **확장성**: 이벤트 기반 아키텍처, AutoScaling
6. **내결함성**: Circuit Breaker, Retry, Fallback 패턴

---

*이 문서는 Traffic Tacos 팀의 내부 아키텍처 설계 가이드입니다.*